apiVersion: v1
kind: Namespace
metadata:
  name: NAMESPACE
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: NAMESPACE-ingress
  namespace: NAMESPACE
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  labels:
    app: NAMESPACE
spec:
  rules:
    - http:
        paths:
          - path: /MODEL_NAME_VALUE(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: "NAMESPACE-service"
                port:
                  number: 80
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: NAMESPACE-stage-ingress
  namespace: NAMESPACE
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/canary: "true"
    nginx.ingress.kubernetes.io/canary-weight: "STAGE_WEIGHT_VALUE"
    nginx.ingress.kubernetes.io/canary-by-header: "HeaderName"
    nginx.ingress.kubernetes.io/canary-by-header-value: "abtesting"
    nginx.ingress.kubernetes.io/rewrite-target: /$2
  labels:
    app: NAMESPACE
spec:
  rules:
    - http:
        paths:
          - path: /MODEL_NAME_VALUE(/|$)(.*)
            pathType: Prefix
            backend:
              service:
                name: "NAMESPACE-service-stage"
                port:
                  number: 80
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /metrics
    prometheus.io/port: "80"
    prometheus.io/scrape: "true"
  name: NAMESPACE-service
  namespace: NAMESPACE
  labels:
    app: app
spec:
  type: NodePort
  selector:
    app: app
  ports:
    - name: port
      protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: NAMESPACE-deployment
  namespace: NAMESPACE
  labels:
    app: app
spec:
  replicas: MIN_REPLICAS
  selector:
    matchLabels:
      app: app
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: TIMESTAMP_VALUE
      labels:
        app: app
    spec:
      containers:
        - name: rnd
          imagePullPolicy: Always
          image: CONTAINER_IMAGE
          env:
            - name: MODEL_NAME
              value: MODEL_NAME_VALUE
            - name: STATE
              value: Production
            - name: MLFLOW_TRACKING_URI
              value: MLFLOW_TRACKING_URI_VALUE
            - name: AWS_ACCESS_KEY_ID
              value: ACCESSKEY_AWS
            - name: AWS_SECRET_ACCESS_KEY
              value: SECRETKEY_AWS
            - name: AZURE_STORAGE_ACCESS_KEY
              value: ACCESSKEY_AZURE
            - name: AZURE_STORAGE_CONNECTION_STRING
              value: SECRETKEY_AZURE
            - name: MONGO_URL
              value: MONGOURL
            - name: MONGO_DB
              value: DBNAME
            - name: COLLECTION_NAME
              value: COLLECTIONNAME
            - name: EXP_ID
              value: EXP_ID_VALUE
            - name: USERNAME
              value: USERNAME_VALUE
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "MIN_MEMORY"
              cpu: "MIN_CPU"
            limits:
              memory: "MAX_MEMORY"
              cpu: "MAX_CPU"

---
apiVersion: v1
kind: Service
metadata:
  name: NAMESPACE-service-stage
  namespace: NAMESPACE
  labels:
    app: app-stage
spec:
  type: NodePort
  selector:
    app: app-stage
  ports:
    - name: port
      protocol: TCP
      port: 80
      targetPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: NAMESPACE-deployment-stage
  namespace: NAMESPACE
  labels:
    app: app-stage
spec:
  replicas: MIN_REPLICAS
  selector:
    matchLabels:
      app: app-stage
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/restartedAt: TIMESTAMP_VALUE
      labels:
        app: app-stage
    spec:
      containers:
        - name: rnd-stage
          imagePullPolicy: Always
          image: CONTAINER_IMAGE
          env:
            - name: STATE
              value: Staging
            - name: MODEL_NAME
              value: MODEL_NAME_VALUE
            - name: MLFLOW_TRACKING_URI
              value: MLFLOW_TRACKING_URI_VALUE
            - name: AWS_ACCESS_KEY_ID
              value: SECRETKEY_AWS
            - name: AWS_SECRET_ACCESS_KEY
              value: SECRETKEY_AWS
            - name: AZURE_STORAGE_ACCESS_KEY
              value: ACCESSKEY_AZURE
            - name: AZURE_STORAGE_CONNECTION_STRING
              value: SECRETKEY_AZURE
            - name: MONGO_URL
              value: MONGOURL
            - name: MONGO_DB
              value: DBNAME
            - name: COLLECTION_NAME
              value: COLLECTIONNAME
            - name: EXP_ID
              value: EXP_ID_VALUE
            - name: USERNAME
              value: USERNAME_VALUE
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "MIN_MEMORY"
              cpu: "MIN_CPU"
            limits:
              memory: "MAX_MEMORY"
              cpu: "MAX_CPU"

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: NAMESPACE-autoscale
  namespace: NAMESPACE
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: NAMESPACE-deployment
  minReplicas: MIN_REPLICAS
  maxReplicas: MAX_REPLICAS
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 60
    # use a "Pods" metric, which takes the average of the
    # given metric across all pods controlled by the autoscaling target
    - type: Object
      object:
        describedObject:
          apiVersion: /v1
          kind: Service
          name: NAMESPACE-service
        # use the metric that you used above: pods/http_requests
        metric:
          name: MODEL_NAME_VALUE_requests_total
        # target 500 milli-requests per second,
        # which is 1 request every two seconds
        target:
          type: Value
          averageValue: 100m